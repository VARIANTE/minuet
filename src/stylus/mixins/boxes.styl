// Minuet
// (c) VARIANTE (http://variante.io)
//
// This software is released under the MIT License:
// http://www.opensource.org/licenses/mit-license.php

/// Transforms an element into a container of the specified type. Special cases
/// include 'fluid' blocks and 'flex' blocks. 'fluid' containers can freely
/// align child inline-blocks with no fixed width/height requirements. 'flex'
/// containers can specify the flex direction. Wrap the $type with '()' or
/// prefix it with 'inline-' to use the inline counterpart of the block type.
///
/// @param {string}      $type          - Type of container. This complies to
///                                       the standard 'display' CSS rule, with
///                                       the exception of the following special
///                                       cases:
///                                       1.  'fluid'
///                                       2.  '(fluid)' or 'inline-fluid'
///                                       3.  'flex'
///                                       4.  '(flex)' or 'inline-flex'
///                                       5.  'flex>' (row)
///                                       6.  '(flex>)' or 'inline-flex>'
///                                       7.  'flex<' (row-reverse)
///                                       8.  '(flex<)' or 'inline-flex<'
///                                       9.  'flex^' (column-reverse)
///                                       10. '(flex^)' or 'inline-flex^'
///                                       11.  'flexv' (column)
///                                       12. '(flexv)' or 'inline-flexv'
///                                       13.  'box' (same as 'boxv')
///                                       14.  '(box)' or 'inline-box'
///                                       15.  'box>' (row)
///                                       16.  '(box>)' or 'inline-box>'
///                                       17.  'box<' (row-reverse)
///                                       18.  '(box<)' or 'inline-box<'
///                                       19.  'box^' (column-reverse)
///                                       20. '(box^)' or 'inline-box^'
///                                       21.  'boxv' (column)
///                                       22. '(boxv)' or 'inline-boxv'
///
/// @param {string|List} $align1 [null] - Internal alignment, can be a string or
///                                       a list of 2 strings.
/// @param {string}      $align2 [null] - Internal alignment adjacent to $align1.
///
/// @group boxes
display($type, $align1=null, $align2=null)
  $_default = ($align1 == null) ? ((match('box', $type) != false) ? center : (top left)) : $align1
  $_align1 = (length($_default) > 1) ? $_default[0] : $_default
  $_align2 = (length($_default) > 1) ? $_default[1] : 'center'
  $_align2 = ($align2 == null) ? $_align2 : $align2
  $_h = ($_align1 == 'left' or $_align1 == 'right') ? $_align1 : 'center'
  $_h = ($_align2 == 'left' or $_align2 == 'right') ? $_align2 : $_h
  $_v = ($_align1 == 'top' or $_align1 == 'bottom') ? $_align1 : 'center'
  $_v = ($_align2 == 'top' or $_align2 == 'bottom') ? $_align2 : $_v

  if $type == '()'
    display: inline

  else if $type == '(block)'
    display: inline-block

  else if $type == 'flex'
    display: flex

  else if $type == '(flex)' or $type == 'inline-flex'
    display: inline-flex

  else if match('fluid', $type) != false
    if $_h == 'left'
      text-align: left
    else if $_h == 'center'
      text-align: center
    else if $_h == 'right'
      text-align: right

    if $_v == 'top'
      & > *
        vertical-align: top
    else if $_v == 'center'
      & > *
        vertical-align: middle
    else if $_v == 'bottom'
      & > *
        vertical-align: bottom

    & > *
      display: inline-block

    if match('inline', $type) != false or match('\(', $type) != false
      display: inline-block
    else
      display: block

    &:before
      content: ''
      display: inline-block
      height: 100%
      vertical-align: middle

  else if match('box', $type) != false
    if match('<', $type) != false
      flex-direction: row-reverse

      if $_h == 'left'
        justify-content: flex-end
      else if $_h == 'center'
        justify-content: center
      else if $_h == 'right'
        justify-content: flex-start

      if $_v == 'top'
        align-items: flex-start
        align-content: flex-start
      else if $_v == 'center'
        align-items: center
        align-content: center
      else if $_v == 'bottom'
        align-items: flex-end
        align-content: flex-end
    else if match('\^', $type) != false
      flex-direction: column-reverse

      if $_v == 'top'
        justify-content: flex-end
      else if $_v == 'center'
        justify-content: center
      else if $_v == 'bottom'
        justify-content: flex-start

      if $_h == 'left'
        align-items: flex-start
        align-content: flex-start
      else if $_h == 'center'
        align-items: center
        align-content: center
      else if $_h == 'right'
        align-items: flex-end
        align-content: flex-end
    else if match('>', $type) != false
      flex-direction: row

      if $_h == 'left'
        justify-content: flex-start
      else if $_h == 'center'
        justify-content: center
      else if $_h == 'right'
        justify-content: flex-end

      if $_v == 'top'
        align-items: flex-start
        align-content: flex-start
      else if $_v == 'center'
        align-items: center
        align-content: center
      else if $_v == 'bottom'
        align-items: flex-end
        align-content: flex-end
    else
      flex-direction: column

      if $_v == 'top'
        justify-content: flex-start
      else if $_v == 'center'
        justify-content: center
      else if $_v == 'bottom'
        justify-content: flex-end

      if $_h == 'left'
        align-items: flex-start
        align-content: flex-start
      else if $_h == 'center'
        align-items: center
        align-content: center
      else if $_h == 'right'
        align-items: flex-end
        align-content: flex-end

    if match('inline', $type) != false or match('\(', $type) != false
      display: inline-flex
    else
      display: flex

    flex-wrap: nowrap
    line-height: normal
    white-space: normal

    > *
      flex-shrink: 1
      flex-basis: auto

  else if match('flex', $type) != false
    if match('<', $type) != false
      flex-direction: row-reverse

      if $_h == 'left'
        justify-content: flex-end
      else if $_h == 'center'
        justify-content: center
      else if $_h == 'right'
        justify-content: flex-start

      if $_v == 'top'
        align-content: flex-start
      else if $_v == 'center'
        align-content: center
      else if $_v == 'bottom'
        align-content: flex-end
    else if match('v', $type) != false
      flex-direction: column

      if $_v == 'top'
        justify-content: flex-start
      else if $_v == 'center'
        justify-content: center
      else if $_v == 'bottom'
        justify-content: flex-end

      if $_h == 'left'
        align-content: flex-start
      else if $_h == 'center'
        align-content: center
      else if $_h == 'right'
        align-content: flex-end
    else if match('\^', $type) != false
      flex-direction: column-reverse

      if $_v == 'top'
        justify-content: flex-end
      else if $_v == 'center'
        justify-content: center
      else if $_v == 'bottom'
        justify-content: flex-start

      if $_h == 'left'
        align-content: flex-start
      else if $_h == 'center'
        align-content: center
      else if $_h == 'right'
        align-content: flex-end
    else if match('>', $type) != false
      flex-direction: row

      if $_h == 'left'
        justify-content: flex-start
      else if $_h == 'center'
        justify-content: center
      else if $_h == 'right'
        justify-content: flex-end

      if $_v == 'top'
        align-content: flex-start
      else if $_v == 'center'
        align-content: center
      else if $_v == 'bottom'
        align-content: flex-end

    if match('inline', $type) != false or match('\(', $type) != false
      display: inline-flex
    else
      display: flex

    align-items: stretch
    flex-wrap: nowrap
    line-height: normal
    white-space: normal

    > *
      flex-shrink: 1
      flex-basis: auto
  else
    display: unquote($type)

/// Transforms containing selector into a container that can freely align child
/// inline-blocks with no fixed width/height requirements. Beware of whitespace
/// between inline elements.
///
/// @param {List}   $alignH ['center'] - Horizontal alignment of child elements
///                                      (i.e. left, center, right). Option to
///                                      specify left/right paddings
///                                      respectively.
/// @param {List}   $alignV ['center'] - Vertical alignment of child elements
///                                      (i.e. top, center, bototm). Option to
///                                      specify top/bottom paddings
///                                      respectively.
/// @param {string} $inline [false]    - Specifies if this block is an inline
///                                      block.
///
/// @group boxes
fluid-block($alignH='center', $alignV='center', $inline=false)
  if $alignH != null and length($alignH) > 0
    if length($alignH) > 1
      padding-left: $alignH[1]
    if length($alignH) > 2
      padding-right: $alignH[2]

  if $alignV != null and length($alignV) > 0
    if length($alignV) > 1
      padding-top: $alignV[1]
    if length($alignV) > 2
      padding-bottom: $alignV[2]

  $h = $alignH[0]
  $v = $alignV[0]

  if $h == 'left'
    text-align: left
  else if $h == 'center' or $h == 'middle'
    text-align: center
  else if $h == 'right'
    text-align: right

  if $v == 'top'
    & > *
      vertical-align: top
  else if $v == 'center' or $v == 'middle'
    & > *
      vertical-align: middle
  else if $v == 'bottom'
    & > *
      vertical-align: bottom

  if $inline == true
    display: inline-block
  else
    display: block

  & > *
    display: inline-block

  &:before
    height: 100%
    vertical-align: middle
    content: ''
    display: inline-block

/// Transforms containing selector into a flexbox which auto aligns child
/// elements according to the specified params.
///
/// @param {List}    $alignH ['center'] - Horizontal alignment of child elements
///                                       (i.e. left, center, right). Option to
///                                       specify left/right paddings
///                                       respectively.
/// @param {List}    $alignV ['center'] - Vertical alignment of child elements
///                                       (i.e. top, middle, bottom). Option to
///                                       specify top/bottom paddings
///                                       respectively.
/// @param {boolean} $direction [row]   - Determines the main axis (i.e. row,
///                                       row-reverse, column, column-reverse).
/// @param {boolean} $wrap [false]      - Determines if wrapping is enabled.
/// @param {string}  $inline [false]    - Specifies if this flexbox is inline.
/// @param {string}  $uniform [false]   - Specifies if this flexbox has uniform
///                                       sized items.
///
/// @group boxes
flex-block($alignH='center', $alignV='center', $direction=row, $wrap=false, $inline=false, $uniform=false)
  line-height: normal
  white-space: normal

  & > *
    flex-shrink: ($wrap == true) ? 1 : 0

  if $uniform == true
    & > *
      flex-grow: 1
      flex-basis: 0

  if $wrap == true
    flex-wrap: wrap
    flex-shrink: 1
  else
    flex-wrap: nowrap

  if $alignH != null and length($alignH) > 0
    if length($alignH) > 1
      padding-left: $alignH[1]
    if length($alignH) > 2
      padding-right: $alignH[2]

  if $alignV != null and length($alignV) > 0
    if length($alignV) > 1
      padding-top: $alignV[1]
    if length($alignV) > 2
      padding-bottom: $alignV[2]

  $h = $alignH[0]
  $v = $alignV[0]

  if $direction == 'row'
    flex-direction: row

    if $h == 'left'
      justify-content: flex-start
    else if $h == 'center' or $h == 'middle'
      justify-content: center
    else if $h == 'right'
      justify-content: flex-end

    if $v == 'top'
      align-items: flex-start
      align-content: flex-start
    else if $v == 'center' or $v == 'middle'
      align-items: center
      align-content: center
    else if $v == 'bottom'
      align-items: flex-end
      align-content: flex-end
  else if $direction == 'row-reverse'
    flex-direction: row-reverse

    if $h == 'left'
      justify-content: flex-end
    else if $h == 'center' or $h == 'middle'
      justify-content: center
    else if $h == 'right'
      justify-content: flex-start

    if $v == 'top'
      align-items: flex-start
      align-content: flex-start
    else if $v == 'center' or $v == 'middle'
      align-items: center
      align-content: center
    else if $v == 'bottom'
      align-items: flex-end
      align-content: flex-end
  else if $direction == 'column'
    flex-direction: column

    if $v == 'top'
      justify-content: flex-start
    else if $v == 'center' or $v == 'middle'
      justify-content: center
    else if $v == 'bottom'
      justify-content: flex-end

    if $h == 'left'
      align-items: flex-start
      align-content: flex-start
    else if $h == 'center' or $h == 'middle'
      align-items: center
      align-content: center
    else if $h == 'right'
      align-items: flex-end
      align-content: flex-end
  else if $direction == 'column-reverse'
    flex-direction: column-reverse

    if $v == 'top'
      justify-content: flex-end
    else if $v == 'center' or $v == 'middle'
      justify-content: center
    else if $v == 'bottom'
      justify-content: flex-start

    if $h == 'left'
      align-items: flex-start
      align-content: flex-start
    else if $h == 'center' or $h == 'middle'
      align-items: center
      align-content: center
    else if $h == 'right'
      align-items: flex-end
      align-content: flex-end

  if $inline == true
    display: inline-flex
  else
    display: flex

/// Transforms the containing selector into a grid driven by flexbox. This grid
/// supports the 4 directions available in flex-direction. It is not a good idea
/// to directly tweak the margin and padding rules of this grid. If you must
/// specify a margin, either put this grid in a parent container and tweak the
/// margins of that instead, or manually take the internal paddings of the grid
/// into account. The same goes for the individual items inside the grid. If the
/// margin/padding rules must be tweaked, it is a better idea to have a child
/// container and tweak the rules of that instead.
///
/// @param {List}    $size [auto]    - Specifies the size of this grid,
///                                        complies to the size mixin.
/// @param {string}  $direction [row]    - Specifies the direction of this grid,
///                                        complies to the rules supported by
///                                        flex-direction.
/// @param {number}  $base-length [auto] - The length of the fixed side of the
///                                        items. If the direction of the grid
///                                        is horizontal, this value would refer
///                                        to the row height. Similarly, if the
///                                        direction of the grid is vertical,
///                                        this value would refer to the column
///                                        width.
/// @param {number}  $base-count [0]     - The number of items in this grid's
///                                        direction. For example, if the
///                                        direction is horizontal, this value
///                                        would refer to the number of columns.
///                                        This value must be greater than or
///                                        equal to 0. If number is 0, there will
///                                        not be a fixed number of items per
///                                        direction - the items will simply
///                                        position freely as long as a given
///                                        direction has enough room. If this
///                                        value is greater than 0, each item
///                                        will have an automatically assigned
///                                        length to the side that is parallel to
///                                        the direction.
/// @param {List}    $padding [0px true] - Specifies the padding between each
///                                        grid item. The first value specifies
///                                        the actual length of the gap, whereas
///                                        the second value is a boolean that
///                                        specifies whether gaps should be
///                                        applied to outmost items (hence the
///                                        grid itself will have an inner padding
///                                        of the gap value).
/// @param {boolean} $autosize [false]   - Specifies whether grid items will
///                                        automatically fill the rest of the
///                                        grid if there are empty spaces.
///
/// @group boxes
flex-grid($size=auto, $direction=row, $base-length=auto, $base-count=0, $padding=0px true, $autosize=false)
  if $base-count < 0
    warn('Value provided for base-count must be >= 0')

  $_bordered = (length($padding) > 1) ? $padding[1] : true
  $_padding = $padding[0]
  $_basis = auto;
  $_orientation = ($direction == 'row' or $direction == 'row-reverse') ? 'horizontal' : 'vertical'
  $_width = $size[0]
  $_height = (length($size) > 1) ? $size[1] : $size[0]

  flex-block('left', 'top', $direction, true)
  size($size)
  width: ((type($_width) == unit) and ($_bordered == false)) ? calc($_width + $_padding) : $_width
  height: ((type($_height) == unit) and ($_bordered == false)) ? calc($_height + $_padding) : $_height
  margin: ($_bordered == true) ? 0 : -$_padding 0 0 -$_padding
  padding: ($_bordered == true) ? $_padding / 2 : 0

  & > *
    margin: ($_bordered == true) ? $_padding / 2 : $_padding 0 0 $_padding
    flex-basis: auto;
    flex-grow: ($autosize == true) ? 1 : 0
    flex-shrink: 0;
    overflow: hidden;

    if $base-count > 0
      if $_bordered == true
        &, &.base-1
          flex-basis: s('calc(%s% - $_padding)', (100 / $base-count * min(1, $base-count)))
        &.base-2
          flex-basis: s('calc(%s% - $_padding)', (100 / $base-count * min(2, $base-count)))
        &.base-3
          flex-basis: s('calc(%s% - $_padding)', (100 / $base-count * min(3, $base-count)))
        &.base-4
          flex-basis: s('calc(%s% - $_padding)', (100 / $base-count * min(4, $base-count)))
        &.base-5
          flex-basis: s('calc(%s% - $_padding)', (100 / $base-count * min(5, $base-count)))
        &.base-6
          flex-basis: s('calc(%s% - $_padding)', (100 / $base-count * min(6, $base-count)))
      else
        &, &.base-1
          flex-basis: s('calc((100% - %s) / %s * %s + %s)', ($_padding * ($base-count)), $base-count, min(1, $base-count), ($_padding * (min(1, $base-count) - 1)))
        &.base-2
          flex-basis: s('calc((100% - %s) / %s * %s + %s)', ($_padding * ($base-count)), $base-count, min(2, $base-count), ($_padding * (min(2, $base-count) - 1)))
        &.base-3
          flex-basis: s('calc((100% - %s) / %s * %s + %s)', ($_padding * ($base-count)), $base-count, min(3, $base-count), ($_padding * (min(3, $base-count) - 1)))
        &.base-4
          flex-basis: s('calc((100% - %s) / %s * %s + %s)', ($_padding * ($base-count)), $base-count, min(4, $base-count), ($_padding * (min(4, $base-count) - 1)))
        &.base-5
          flex-basis: s('calc((100% - %s) / %s * %s + %s)', ($_padding * ($base-count)), $base-count, min(5, $base-count), ($_padding * (min(5, $base-count) - 1)))
        &.base-6
          flex-basis: s('calc((100% - %s) / %s * %s + %s)', ($_padding * ($base-count)), $base-count, min(6, $base-count), ($_padding * (min(6, $base-count) - 1)))

    if $_orientation == 'horizontal'
      if $base-count > 0
        if $_bordered == true
          &, &.base-1
            width: s('calc(%s% - $_padding)', (100 / $base-count * min(1, $base-count)))
          &.base-2
            width: s('calc(%s% - $_padding)', (100 / $base-count * min(2, $base-count)))
          &.base-3
            width: s('calc(%s% - $_padding)', (100 / $base-count * min(3, $base-count)))
          &.base-4
            width: s('calc(%s% - $_padding)', (100 / $base-count * min(4, $base-count)))
          &.base-5
            width: s('calc(%s% - $_padding)', (100 / $base-count * min(5, $base-count)))
          &.base-6
            width: s('calc(%s% - $_padding)', (100 / $base-count * min(6, $base-count)))
        else
          &, &.base-1
            width: s('calc((100% - %s) / %s * %s + %s)', ($_padding * ($base-count)), $base-count, min(1, $base-count), ($_padding * (min(1, $base-count) - 1)))
          &.base-2
            width: s('calc((100% - %s) / %s * %s + %s)', ($_padding * ($base-count)), $base-count, min(2, $base-count), ($_padding * (min(2, $base-count) - 1)))
          &.base-3
            width: s('calc((100% - %s) / %s * %s + %s)', ($_padding * ($base-count)), $base-count, min(3, $base-count), ($_padding * (min(3, $base-count) - 1)))
          &.base-4
            width: s('calc((100% - %s) / %s * %s + %s)', ($_padding * ($base-count)), $base-count, min(4, $base-count), ($_padding * (min(4, $base-count) - 1)))
          &.base-5
            width: s('calc((100% - %s) / %s * %s + %s)', ($_padding * ($base-count)), $base-count, min(5, $base-count), ($_padding * (min(5, $base-count) - 1)))
          &.base-6
            width: s('calc((100% - %s) / %s * %s + %s)', ($_padding * ($base-count)), $base-count, min(6, $base-count), ($_padding * (min(6, $base-count) - 1)))

      height: $base-length
    else
      width: $base-length

      if $base-count > 0
        if $_bordered == true
          &, &.base-1
            height: s('calc(%s% - $_padding)', (100 / $base-count * min(1, $base-count)))
          &.base-2
            height: s('calc(%s% - $_padding)', (100 / $base-count * min(2, $base-count)))
          &.base-3
            height: s('calc(%s% - $_padding)', (100 / $base-count * min(3, $base-count)))
          &.base-4
            height: s('calc(%s% - $_padding)', (100 / $base-count * min(4, $base-count)))
          &.base-5
            height: s('calc(%s% - $_padding)', (100 / $base-count * min(5, $base-count)))
          &.base-6
            height: s('calc(%s% - $_padding)', (100 / $base-count * min(6, $base-count)))
        else
          &, &.base-1
            height: s('calc((100% - %s) / %s * %s + %s)', ($_padding * ($base-count)), $base-count, min(1, $base-count), ($_padding * (min(1, $base-count) - 1)))
          &.base-2
            height: s('calc((100% - %s) / %s * %s + %s)', ($_padding * ($base-count)), $base-count, min(2, $base-count), ($_padding * (min(2, $base-count) - 1)))
          &.base-3
            height: s('calc((100% - %s) / %s * %s + %s)', ($_padding * ($base-count)), $base-count, min(3, $base-count), ($_padding * (min(3, $base-count) - 1)))
          &.base-4
            height: s('calc((100% - %s) / %s * %s + %s)', ($_padding * ($base-count)), $base-count, min(4, $base-count), ($_padding * (min(4, $base-count) - 1)))
          &.base-5
            height: s('calc((100% - %s) / %s * %s + %s)', ($_padding * ($base-count)), $base-count, min(5, $base-count), ($_padding * (min(5, $base-count) - 1)))
          &.base-6
            height: s('calc((100% - %s) / %s * %s + %s)', ($_padding * ($base-count)), $base-count, min(6, $base-count), ($_padding * (min(6, $base-count) - 1)))

/// Transforms target selector into a container for parallax elements.
///
/// @param {number} $perspective [1] - Tweak this value to adjust perspective.
///
/// @group boxes
parallax-block($perspective=1)
  height: 100vh
  overflow-x: hidden
  overflow-y: scroll
  perspective: unit($perspective, 'px')

/// Makes a video fill the parent block, maintaining aspect ratio and centered
/// (like background-size: cover).
///
/// @group boxes
cover-video()
  abs-align('left' 50%, 'top' 50%)
  size(auto)
  min-width: 100%
  min-height: 100%
  transform: translate3d(-50%, -50%, 0)
