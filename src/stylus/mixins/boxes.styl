// Â© Andrew Wei

/// Transforms an element into a container of the specified `$type`. Special
/// cases include types specified as `fluid`, `flex`, `box`, `elastic` and
/// `grid`. Wrap `$type` with `()` or prefix it with `inline-` to use the inline
/// equivalent. Otherwise the type will be directly applied to the `display` CSS
/// rule.
///
/// `fluid` - Freely aligns child elements, (i.e. `top left`, `bottom right`,
/// `center center`, etc). Child elements must have `display` set as
/// `inline-block` (default). Child elements do not need to have defined `width`
/// and `height`.
///
/// Syntax: `fluid`
///
/// `flex` - Arranges children in the specified `flex-direction` using 
/// `display: flex`. The lengths of the children that are parallel to the 
/// `flex-direction` are NOT inferred and MUST BE specified by the children. On 
/// the other hand, the lengths of the children that are perpendicular to the 
/// `flex-direction`  automatically match that of the container. If the total 
/// length of the children in the specified `flex-direction` exceeds that of the 
/// container, the length of each child will shrink (`flex-shrink: 1`) 
/// proportionally according to its original length to fit the container. It is 
/// not recommended to add `padding` to the children because `padding` is used 
/// as part of the calculation for `flex-shrink`.
///
/// Syntax: `flex{^|>|v|<}`, where:
///
/// `^` = `flex-direction: column-reverse`
///
/// `>` = `flex-direction: row` (default)
///
/// `v` = `flex-direction: column`
///
/// `<` = `flex-direction: row-reverse`
///
/// `box` - Similar to `fluid` containers, freely aligns child elements without
/// interfering with their width and height. Child elements can then specify
/// their own dimensions. The only difference between `box` containers and
/// `fluid` containers is that `box` containers are not restricted to only
/// supporting `inline-block` child elements. Syntax is similar to `flex`.
///
/// Syntax: `box{^|>|v|<}`, where:
///
/// `^` = `flex-direction: column-reverse`
///
/// `>` = `flex-direction: row` (default)
///
/// `v` = `flex-direction: column`
///
/// `<` = `flex-direction: row-reverse`
///
/// `elastic` - Similar to `flex`, except it automatically stretches its 
/// children evenly to fill the container in the specified `flex-direction`. 
/// Like `flex`, avoid adding `padding` to child elements in case of unexpected 
/// size adjustments.
///
/// Syntax: `elastic{^|>|v|<}`, where:
///
/// `^` = `flex-direction: column-reverse`
///
/// `>` = `flex-direction: row` (default)
///
/// `v` = `flex-direction: column`
///
/// `<` = `flex-direction: row-reverse`
///
/// `grid` - Literal grids driven by flexbox. This grid supports all directions
/// available in `flex-direction`. It is not a good idea to directly tweak the
/// margin and padding rules of this grid. If you must specify a margin, either
/// put this grid in a parent container and tweak the margins of that instead,
/// or manually take the internal paddings of the grid into account. The same
/// goes for the direct child elements inside the grid. If the margin/padding 
/// must be tweaked for these child elements, create a container inside the 
/// elements and modify the margin/padding of that container instead. There are 
/// a few customizable properties you can specify for this grid, as follows:
///   - `size` - The number of child elements expected per row/column, depending
///     on the `flex-direction`. This number must not be less than `0`. When
///     `size` is bigger than `0`, each row/column will ensure that it only has
///     that number of child elements in it, and push subsequent elements to the
///     next row/column. If `size` is `0`, this restraint is removed and 
///     elements are  placed one after another as long as there is room in the 
///     current row/column. Defaults to `0`.
///   - `grow` - Specifies whether child elements will automatically grow in the
///     specified `flex-direction` to fill remaininng gaps in the grid. Note
///     that if there is empty space in a given row/column, all elements in that
///     row/column will grow proportionally, not just the last element. Defaults
///     to `false`.
///   - `width` - This is the width of either the column or the entire grid,
///     depending on the `flex-direction`. If horizontal, this reflects the
///     width of the entire grid. If vertical, this reflects the column width.
///     Defaults to `auto`.
///   - `height` - This is the height of either the row or the entire grid,
///     depending on the `flex-direction`. If horizontal, this reflects the row
///     height. If vertical, this reflects the height of the entire grid.
///     Defaults to `auto`.
///   - `padding` - This is the padding between each grid cell. Defaults to
///     `0px`.
///   - `padding-around` - This specifies whether padding will be applied to
///     the inner wall of the grid. If `false`, padding will only be applied
///     between grid cells, and not between the grid cell and the grid wall.
///     Defaults to `false`.
///
/// Syntax: `grid{direction:<|^|>|v}{size:number}{grow:?}{width:@number}{height:/number}{padding:|[number]}`, where:
///
/// `^` = `flex-direction: column-reverse`
///
/// `>` = `flex-direction: row` (default)
///
/// `v` = `flex-direction: column`
///
/// `<` = `flex-direction: row-reverse`
///
/// `size:number` = A number, i.e. `4`
///
/// `grow:?` = Specify `grow` to be `true` with `?`, leave out if `false`
///
/// `width:@number` = Specify length or `auto` prefixed by `@`, i.e. `@400px` or
///                   `@auto`
///
/// `height:/number` = Specify length or `auto` prefixed by `/`, i.e. `/100%` or
///                    `/auto`
///
/// `padding:|[number]` = Specify length prefixed by `|` or wrap the length in
///                       `[]` to specify `padding-around` as `true`, or simply
///                       leave it out for `false`, i.e. `|4px` or `|[4px]`
///
/// @param {string}      $type          - Type of container. If none of the
///                                       special types are specified, this
///                                       value will apply directly to the
///                                       'display' CSS rule.
/// @param {string|List} $align1 [null] - Internal alignment, can be a string or
///                                       a list of 2 strings.
/// @param {string}      $align2 [null] - Internal alignment adjacent to $align1.
///
/// @example
///   // Defines a fluid block with child elements aligned to top left (default)
///   @include display('fluid');
///
///   // Defines a fluid block with child elements algined to the absolute center
///   @include display('fluid', center);
///
///   // Defines an inline fluid block (i.e. display: inline-block) with child
///   // elements aligned to top left (default)
///   @include display('(fluid)');
///
///   // Defines an inline fluid block (i.e. display: inline-block) with child
///   // elements aligned to bottom right
///   @include display('inline-fluid', bottom right);
///
/// @example
///   // Defines a flex block with flex-direction as 'row'
///   @include display('flex>');
///
///   // Defines an inline box block with flex-direction as 'column'
///   @include display('(boxv)');
///
///   // Defines an elastic block with flex-direction as 'row-reverse'
///   @include display('elastic<');
///
/// @example
///   // Defines a grid with flex-direction as 'row', with 100% width and auto
///   // height and 300px row height, 5px surrounding padding between each grid
///   // cell and maximum 3 cells per row.
///   @include display('grid>3@100%/300px|[5px]');
///
///   // Defines a grid with flex-direction as 'column', with auto width and
///   // 100% height and auto column width, 1px padding between grid cells and
///   // no padding between grid cells and grid wall.
///   @include display('gridv|1px');
///
/// @group boxes
display($type, $align1=null, $align2=null)
  $_default = ($align1 == null) ? ((match('box', $type) != null) ? center : (top left)) : $align1
  $_align1 = (length($_default) > 1) ? $_default[0] : $_default
  $_align2 = (length($_default) > 1) ? $_default[1] : 'center'
  $_align2 = ($align2 == null) ? $_align2 : $align2
  $_h = ($_align1 == 'left' or $_align1 == 'right') ? $_align1 : 'center'
  $_h = ($_align2 == 'left' or $_align2 == 'right') ? $_align2 : $_h
  $_v = ($_align1 == 'top' or $_align1 == 'bottom') ? $_align1 : 'center'
  $_v = ($_align2 == 'top' or $_align2 == 'bottom') ? $_align2 : $_v

  if $type == '()'
    display: inline

  else if $type == '(block)'
    display: inline-block

  else if $type == 'flex'
    display: flex

  else if $type == '(flex)' or $type == 'inline-flex'
    display: inline-flex

  else if match('fluid', $type) != null
    if $_h == 'left'
      text-align: left
    else if $_h == 'center'
      text-align: center
    else if $_h == 'right'
      text-align: right

    if $_v == 'top'
      & > *
        vertical-align: top
    else if $_v == 'center'
      & > *
        vertical-align: middle
    else if $_v == 'bottom'
      & > *
        vertical-align: bottom

    & > *
      display: inline-block

    if match('inline', $type) != null or match('\(', $type) != null
      display: inline-block
    else
      display: block

    &::before
      content: ''
      display: inline-block
      height: 100%
      vertical-align: middle

  else if match('box', $type) != null or match('flex', $type) != null or match('elastic', $type) != null
    if match('v', $type) != null
      flex-direction: column
      if $_v == 'top'
        justify-content: flex-start
      else if $_v == 'center'
        justify-content: center
      else if $_v == 'bottom'
        justify-content: flex-end
      if $_h == 'left'
        align-content: flex-start
      else if $_h == 'center'
        align-content: center
      else if $_h == 'right'
        align-content: flex-end
    else if match('<', $type) != null
      flex-direction: row-reverse
      if $_h == 'left'
        justify-content: flex-end
      else if $_h == 'center'
        justify-content: center
      else if $_h == 'right'
        justify-content: flex-start
      if $_v == 'top'
        align-content: flex-start
      else if $_v == 'center'
        align-content: center
      else if $_v == 'bottom'
        align-content: flex-end
    else if match('\^', $type) != null
      flex-direction: column-reverse
      if $_v == 'top'
        justify-content: flex-end
      else if $_v == 'center'
        justify-content: center
      else if $_v == 'bottom'
        justify-content: flex-start
      if $_h == 'left'
        align-content: flex-start
      else if $_h == 'center'
        align-content: center
      else if $_h == 'right'
        align-content: flex-end
    else
      flex-direction: row
      if $_h == 'left'
        justify-content: flex-start
      else if $_h == 'center'
        justify-content: center
      else if $_h == 'right'
        justify-content: flex-end
      if $_v == 'top'
        align-content: flex-start
      else if $_v == 'center'
        align-content: center
      else if $_v == 'bottom'
        align-content: flex-end

    if match('box', $type) != null
      if match('<', $type) != null
        if $_v == 'top'
          align-items: flex-start
        else if $_v == 'center'
          align-items: center
        else if $_v == 'bottom'
          align-items: flex-end
      else if match('\^', $type) != null
        if $_h == 'left'
          align-items: flex-start
        else if $_h == 'center'
          align-items: center
        else if $_h == 'right'
          align-items: flex-end
      else if match('v', $type) != null
        if $_h == 'left'
          align-items: flex-start
        else if $_h == 'center'
          align-items: center
        else if $_h == 'right'
          align-items: flex-end
      else
        if $_v == 'top'
          align-items: flex-start
        else if $_v == 'center'
          align-items: center
        else if $_v == 'bottom'
          align-items: flex-end

      > *
        flex-grow: 0
        flex-basis: auto

    else if match('flex', $type) != null
      align-items: stretch
      > *
        flex-grow: 0
        flex-basis: auto
        padding: 0

    else if match('elastic', $type) != null
      align-items: stretch
      > *
        flex-grow: 1
        flex-basis: 0
        padding: 0

    if match('inline', $type) != null or match('\(', $type) != null
      display: inline-flex
    else
      display: flex

    flex-wrap: nowrap
    line-height: normal
    white-space: normal

    > *
      flex-shrink: ((match('box', $type) != null) ? 0 : 1)

  else if match('grid', $type) != null
    $_dregex = match('\^|>|v|<', $type) or '>'
    $_sregex = match('grid[\^|>|v|<]?([0-9]+)', $type)
    $_wregex = match('@(.*?)(?=\/|\||$)', $type)
    $_hregex = match('/(.*?)(?=\||$)', $type)
    $_pregex = match('(\|\[|\|)(.*?)(?=\]|$)', $type)
    $_direction = $_dregex ? $_dregex[0] : '>'
    $_size = $_sregex ? convert($_sregex[1]) : 0
    $_grow = match('\?', $type) != null
    $_width = $_wregex ? $_wregex[1] : ''
    $_height = $_hregex ? $_hregex[1] : ''
    $_padding-around = match('\[.*\]', $type) != null
    $_padding = $_pregex ? $_pregex[2] : '0px'
    $_padding = ($_padding == '') ? 0px : convert($_padding)
    $_orientation = ($_direction == '^' or $_direction == 'v') ? 'vertical' : 'horizontal'

    if $_size < 0
      warn('Count must be >= 0')

    display('flex'+$_direction, $_h, $_v)

    if match('inline', $type) != null or match('\(', $type) != null
      display: inline-flex
    else
      display: flex
    flex-wrap: wrap

    margin: ($_padding-around == true) ? 0 : ($_padding*-1 0 0 $_padding*-1)
    padding: ($_padding-around == true) ? $_padding / 2 : 0

    if $_orientation == 'horizontal'
      $_width = ($_width == '') ? 100% : (($_width == 'auto') ? auto : convert($_width))
      $_height = ($_height == '') ? auto : (($_height == 'auto') ? auto : convert($_height))
      width: ((type($_width) == unit) and ($_padding-around == false)) ? s('calc(%s + %s)', $_width, $_padding) : $_width
      height: auto
      if $_height != auto
        min-height: ($_padding-around == false) ? s('calc(%s + %s)', $_height, $_padding) : $_height
    else
      $_width = ($_width == '') ? auto : (($_width == 'auto') ? auto : convert($_width))
      $_height = ($_height == '') ? 100% : (($_height == 'auto') ? auto : convert($_height))
      width: auto
      height: (type($_height == unit) and ($_padding-around == false)) ? s('calc(%s + %s)', $_height, $_padding) : $_height
      if $_width != auto
        min-width: ($_padding-around == false) ? s('calc(%s + %s)', $_width, $_padding) : $_width

    > *
      margin: ($_padding-around == true) ? $_padding / 2 : $_padding 0 0 $_padding
      flex-basis: auto;
      flex-grow: ($_grow == true) ? 1 : 0
      flex-shrink: 0;

      if $_size > 0
        if $_padding-around == true
          &, &.base-1
            flex-basis: s('calc(%s% - $_padding)', (100 / $_size * min(1, $_size)))
          &.base-2
            flex-basis: s('calc(%s% - $_padding)', (100 / $_size * min(2, $_size)))
          &.base-3
            flex-basis: s('calc(%s% - $_padding)', (100 / $_size * min(3, $_size)))
          &.base-4
            flex-basis: s('calc(%s% - $_padding)', (100 / $_size * min(4, $_size)))
          &.base-5
            flex-basis: s('calc(%s% - $_padding)', (100 / $_size * min(5, $_size)))
          &.base-6
            flex-basis: s('calc(%s% - $_padding)', (100 / $_size * min(6, $_size)))
        else
          &, &.base-1
            flex-basis: s('calc((100% - %s) / %s * %s + %s)', ($_padding * ($_size)), $_size, min(1, $_size), ($_padding * (min(1, $_size) - 1)))
          &.base-2
            flex-basis: s('calc((100% - %s) / %s * %s + %s)', ($_padding * ($_size)), $_size, min(2, $_size), ($_padding * (min(2, $_size) - 1)))
          &.base-3
            flex-basis: s('calc((100% - %s) / %s * %s + %s)', ($_padding * ($_size)), $_size, min(3, $_size), ($_padding * (min(3, $_size) - 1)))
          &.base-4
            flex-basis: s('calc((100% - %s) / %s * %s + %s)', ($_padding * ($_size)), $_size, min(4, $_size), ($_padding * (min(4, $_size) - 1)))
          &.base-5
            flex-basis: s('calc((100% - %s) / %s * %s + %s)', ($_padding * ($_size)), $_size, min(5, $_size), ($_padding * (min(5, $_size) - 1)))
          &.base-6
            flex-basis: s('calc((100% - %s) / %s * %s + %s)', ($_padding * ($_size)), $_size, min(6, $_size), ($_padding * (min(6, $_size) - 1)))

      if $_orientation == 'horizontal'
        if $_size > 0
          if $_padding-around == true
            &, &.base-1
              width: s('calc(%s% - $_padding)', (100 / $_size * min(1, $_size)))
            &.base-2
              width: s('calc(%s% - $_padding)', (100 / $_size * min(2, $_size)))
            &.base-3
              width: s('calc(%s% - $_padding)', (100 / $_size * min(3, $_size)))
            &.base-4
              width: s('calc(%s% - $_padding)', (100 / $_size * min(4, $_size)))
            &.base-5
              width: s('calc(%s% - $_padding)', (100 / $_size * min(5, $_size)))
            &.base-6
              width: s('calc(%s% - $_padding)', (100 / $_size * min(6, $_size)))
          else
            &, &.base-1
              width: s('calc((100% - %s) / %s * %s + %s)', ($_padding * ($_size)), $_size, min(1, $_size), ($_padding * (min(1, $_size) - 1)))
            &.base-2
              width: s('calc((100% - %s) / %s * %s + %s)', ($_padding * ($_size)), $_size, min(2, $_size), ($_padding * (min(2, $_size) - 1)))
            &.base-3
              width: s('calc((100% - %s) / %s * %s + %s)', ($_padding * ($_size)), $_size, min(3, $_size), ($_padding * (min(3, $_size) - 1)))
            &.base-4
              width: s('calc((100% - %s) / %s * %s + %s)', ($_padding * ($_size)), $_size, min(4, $_size), ($_padding * (min(4, $_size) - 1)))
            &.base-5
              width: s('calc((100% - %s) / %s * %s + %s)', ($_padding * ($_size)), $_size, min(5, $_size), ($_padding * (min(5, $_size) - 1)))
            &.base-6
              width: s('calc((100% - %s) / %s * %s + %s)', ($_padding * ($_size)), $_size, min(6, $_size), ($_padding * (min(6, $_size) - 1)))

        height: $_height
      else
        width: $_width

        if $_size > 0
          if $_padding-around == true
            &, &.base-1
              height: s('calc(%s% - $_padding)', (100 / $_size * min(1, $_size)))
            &.base-2
              height: s('calc(%s% - $_padding)', (100 / $_size * min(2, $_size)))
            &.base-3
              height: s('calc(%s% - $_padding)', (100 / $_size * min(3, $_size)))
            &.base-4
              height: s('calc(%s% - $_padding)', (100 / $_size * min(4, $_size)))
            &.base-5
              height: s('calc(%s% - $_padding)', (100 / $_size * min(5, $_size)))
            &.base-6
              height: s('calc(%s% - $_padding)', (100 / $_size * min(6, $_size)))
          else
            &, &.base-1
              height: s('calc((100% - %s) / %s * %s + %s)', ($_padding * ($_size)), $_size, min(1, $_size), ($_padding * (min(1, $_size) - 1)))
            &.base-2
              height: s('calc((100% - %s) / %s * %s + %s)', ($_padding * ($_size)), $_size, min(2, $_size), ($_padding * (min(2, $_size) - 1)))
            &.base-3
              height: s('calc((100% - %s) / %s * %s + %s)', ($_padding * ($_size)), $_size, min(3, $_size), ($_padding * (min(3, $_size) - 1)))
            &.base-4
              height: s('calc((100% - %s) / %s * %s + %s)', ($_padding * ($_size)), $_size, min(4, $_size), ($_padding * (min(4, $_size) - 1)))
            &.base-5
              height: s('calc((100% - %s) / %s * %s + %s)', ($_padding * ($_size)), $_size, min(5, $_size), ($_padding * (min(5, $_size) - 1)))
            &.base-6
              height: s('calc((100% - %s) / %s * %s + %s)', ($_padding * ($_size)), $_size, min(6, $_size), ($_padding * (min(6, $_size) - 1)))

  else
    display: unquote($type)

/// Transforms target selector into a container for parallax elements.
///
/// @param {number} $perspective [1] - Tweak this value to adjust perspective.
///
/// @group boxes
parallax-block($perspective=1)
  height: 100vh
  overflow-x: hidden
  overflow-y: scroll
  perspective: unit($perspective, 'px')

/// Makes a video fill the parent block, maintaining aspect ratio and centered
/// (like background-size: cover).
///
/// @group boxes
cover-video()
  abs-align('left' 50%, 'top' 50%)
  size(auto)
  min-width: 100%
  min-height: 100%
  transform: translate3d(-50%, -50%, 0)

/// Makes an image fill the parent block. Note that this mixin doesn't support
/// all browsers.
///
/// @link http://caniuse.com/#feat=object-fit
///
/// @group boxes
cover-image()
  size(100%)
  object-fit: cover
