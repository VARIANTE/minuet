/// Converts a string to a number with/without a unit, where applicable. Any
/// invalid inputs such as a non-number string or an unrecognized unit will
/// output `0`. Passing a number into this function does nothing.
///
/// @param {String | Number} $value - Value to be converted.
///
/// @returns {Number} The converted number or unit value. If the input cannot be
///                   converted, `0` is returned.
///
/// @example scss
///   to-number('6') // 6
///   to-number('6px') // 1px
///   to-number('6foo') // 0
///   to-number('foo') // 0
///
/// @group utils
@function to-number($value) {
  @if (type-of($value) == 'number') {
    @return $value;
  } @else if (type-of($value) != 'string') {
    @warn 'Value must be a number or a string';
    @return 0;
  }

  $_output: 0;
  $_digits: 0;
  $_negative: str-slice($value, 1, 1) == '-';
  $_lookup: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

  @for $i from if($_negative, 2, 1) through str-length($value) {
    $_c: str-slice($value, $i, $i);

    @if not (index(map-keys($_lookup), $_c) or $_c == '.') {
      @return to-unit(if($_negative, -$_output, $_output), str-slice($value, $i));
    }

    @if ($_c == '.') {
      $_digits: 1;
    } @else if ($_digits == 0) {
      $_output: $_output * 10 + map-get($_lookup, $_c);
    } @else {
      $_digits: $_digits * 10;
      $_output: $_output + map-get($_lookup, $_c) / $_digits;
    }
  }

  @return if($_negative, -$_output, $_output);
}

/// Converts a number without unit to a number with the desired unit. If the
/// desired unit is an unrecognized unit, this function will output `0`.
///
/// @param {Number} $value - The number value to convert.
/// @param {String} $unit - Desired unit after the conversion.
///
/// @returns {Number} The converted number value with the desired unit.
///
/// @example scss
///   to-unit(6, 'px') // 6px
///   to-unit('6', 'px') // 0
///   to-unit(6, 'foo') // 0
///
/// @group utils
@function to-unit($value, $unit) {
  $_units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);

  @if (not index(map-keys($_units), $unit)) {
    @warn 'Invalid unit: #{$unit}';
    @return 0;
  }

  @return $value * map-get($_units, $unit);
}

/// Converts a font size to em.
///
/// @param {Number} $value - Font size.
///
/// @returns {font-size}
///
/// @group utils
@function to-em($value) {
  $_unit: unit($value);

  @if ($_unit == 'px') {
    @return #{$value / 16px}em;
  }
  @else {
    @return $value;
  }
}

/// Removes the unit from a number.
///
/// @param {Number} $number - Number to remove unit from
///
/// @returns {Number}
///
/// @group utils
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

/// Checks if string ends with substring.
///
/// @param {String} $string - String to check.
/// @param {String} $substring - Substring to check against.
///
/// @returns {Boolean} `true` if string contains the substring, `false`
///                   otherwise.
///
/// @group utils
@function ends-with($string, $substring) {
  @return str-slice($string, (str-length($string) - str-length($substring) + 1)) == $substring;
}
