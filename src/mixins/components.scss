// Â© Andrew Wei

/// Transforms a button element into a standard hamburger menu button. Element
/// can be any of the button elements supported by Minuet (@see {mixin} buttons).
/// The button element must have at least 1 child `<span>` element, at most 2,
/// to be used as the burger slices.
///
/// @param {number} $width     [27px] - Width of the burger.
/// @param {number} $height    [20px] - Height of the burger.
/// @param {number} $thickness [2px]  - Thickness of each slice.
/// @param {Color}  $color     [#fff] - Color of the slices.
///
/// @group components
@mixin burger-button($width:27px, $height:20px, $thickness:2px, $color:#fff) {
  @include min-size($width $height);
  @include size($width $height);
  background: transparent;

  &:hover {
    span:not(:only-of-type):nth-of-type(2) {
      &::after { @include size(#{$width / 2} $thickness); }
    }

    span:only-of-type {
      &::after { @include size($width $thickness); }
    }
  }

  &:active {
    span:only-of-type {
      @include size(0 $thickness);
      &:nth-child(1) { transform: translate3d(0, 0, 0); }
      &::before { transform: translate3d(0, #{$height / 2}, 0) rotate(45deg); }
      &::after { transform: translate3d(0, #{$height / -2 + $thickness}, 0) rotate(-45deg); }
    }

    span:not(:only-of-type) {
      @include size(0 $thickness);

      &:nth-of-type(1) {
        transform: translate3d(#{$width / 2}, 0, 0);

        &::before {
          @include size(#{$width / 2} $thickness);
          transform: translate3d(#{$width / -2 + $thickness}, #{$height / 4}, 0) rotate(45deg);
        }

        &::after {
          @include size(#{$width / 2} $thickness);
          transform: translate3d(#{$width / -2 + $thickness}, #{$height / -4 + $thickness}, 0) rotate(-45deg);
        }
      }

      &:nth-of-type(2) {
        transform: translate3d(#{$width / -2}, 0, 0);

        &::before {
          @include size(#{$width / 2} $thickness);
          transform: translate3d(#{$thickness * -1}, #{$height / 4}, 0) rotate(-45deg);
        }

        &::after {
          @include size(#{$width / 2} $thickness);
          transform: translate3d(#{$thickness * -1}, #{$height / -4 + $thickness}, 0) rotate(45deg);
        }
      }
    }

    span:only-of-type::after {
      @include size($width $thickness);
    }
  }

  span:only-of-type,
  span:only-of-type::before,
  span:only-of-type::after {
    @include size($width $thickness);
  }

  span:not(:only-of-type),
  span:not(:only-of-type)::before,
  span:not(:only-of-type)::after {
    @include size(#{$width / 2} $thickness);
  }

  span,
  span::before,
  span::after {
    @include transition(all, 300ms, ease-in-out);
    background: $color;
    content: '';
  }

  span:only-of-type {
    @include align('left', 'top');
    @include edge(#{($height - $thickness) / 2} null null null);

    &::before {
      @include align();
      @include edge(#{($height - $thickness) / -2} null null null);
    }

    &::after {
      @include align('left', 'bottom');
      @include edge(null null #{($height - $thickness) / -2} null);
      @include size(#{$width / 2} $thickness);
    }
  }

  span:not(:only-of-type) {
    &:nth-of-type(1) {
      @include align('left', 'top');
      @include edge(#{($height - $thickness) / 2} null null null);
    }

    &:nth-of-type(2) {
      @include align('right', 'top');
      @include edge(#{($height - $thickness) / 2} null null null);

      &::after { @include size(0 $thickness); }
    }

    &::before {
      @include align();
      @include edge(#{($height - $thickness) / -2} null null null);
    }

    &::after {
      @include align('left', 'bottom');
      @include edge(null null #{($height - $thickness) / -2} null);
    }
  }
}
