// Â© Andrew Wei

$font-weights: (
  'thin': 100,
  'extra-light': 200,
  'light': 300,
  'normal': 400,
  'medium': 500,
  'semi-bold': 600,
  'bold': 700,
  'extra-bold': 800,
  'black': 900
);

/// Infers the font format from a font file extension. Supported extensions
/// include: `eot`, `woff2`, `woff`, `ttf`, `otf`, `svg`.
///
/// @param {string} $path - The path of the font file.
///
/// @return {string} The font format. Defaults to `opentype` if unable to infer.
///
/// @group typogrpahy
@function get-font-format($path) {
  @if (ends-with($path, '.eot')) {
    @return 'eot';
  }
  @else if (ends-with($path, '.woff2')) {
    @return 'woff2';
  }
  @else if (ends-with($path, '.woff')) {
    @return 'woff';
  }
  @else if (ends-with($path, '.ttf')) {
    @return 'truetype';
  }
  @else if (ends-with($path, '.svg')) {
    @return 'svg';
  }
  @else {
    @return 'opentype';
  }
}

/// Infers the font style from a font file path. Supports `italic` and `oblique`.
///
/// @param {string} $path - Path of the font file.
///
/// @return {string} The font style of the font file. Defaults to `normal` if
/// unable to infer.
///
/// @group typogrpahy
@function get-font-style($path) {
  @if (str-index($path, 'italic') or str-index($path, 'Italic')) {
    @return italic;
  }
  @else if (str-index($path, 'oblique') or str-index($path, 'Oblique')) {
    @return oblique;
  }
  @else {
    @return normal;
  }
}

/// Infers the font weight from a font file path.
///
/// @param {string} $path - Path of the font file.
///
/// @return {number} The font weight of the font file. Defaults to normal (400).
///
/// @group typogrpahy
@function get-font-weight($path) {
  @if (str-index($path, 'thin') or str-index($path, 'Thin')) {
    @return map-get($font-weights, 'thin');
  }
  @else if (str-index($path, 'extralight') or str-index($path, 'ExtraLight')) {
    @return map-get($font-weights, 'extra-light');
  }
  @else if (str-index($path, 'light') or str-index($path, 'Light')) {
    @return map-get($font-weights, 'light');
  }
  @else if (str-index($path, 'medium') or str-index($path, 'Medium')) {
    @return map-get($font-weights, 'medium');
  }
  @else if (str-index($path, 'semibold') or str-index($path, 'SemiBold')) {
    @return map-get($font-weights, 'semi-bold');
  }
  @else if (str-index($path, 'extrabold') or str-index($path, 'ExtraBold')) {
    @return map-get($font-weights, 'extra-bold');
  }
  @else if (str-index($path, 'bold') or str-index($path, 'Bold')) {
    @return map-get($font-weights, 'bold');
  }
  @else if (str-index($path, 'black') or str-index($path, 'Black')) {
    @return map-get($font-weights, 'black');
  }
  @else {
    @return map-get($font-weights, 'normal');
  }
}

/// Defines the @font-face rule.
///
/// @param {string} $family - The `font-family` property.
/// @param {string} $src - The `url` property.
/// @param {string|number} $weight [null] - The `font-weight` property.
/// @param {string} $style [null] - The `font-style` property.
/// @param {string} $display [auto] - The `font-display` property.
///
/// @group typogrpahy
@mixin font-face($family, $src, $weight:null, $style:null, $display:auto) {
  @font-face {
    font-family: $family;
    // src: url($src) format(#{get-font-format($src)});
    font-style: if($style == null, get-font-style($src), $style);
    font-weight: if($weight == null, get-font-weight($src), $weight);
    font-display: $display;
  }
}
