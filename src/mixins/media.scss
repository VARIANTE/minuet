/// Media query breakpoints.
///
/// @group media
$breakpoints: (
  'mobile': (
    'min': 0px,
    'max': 639px
  ),
  'tablet': (
    'min': 640px,
    'max': 1024px
  ),
  'notebook': (
    'min': 1025px,
    'max': 1439px
  ),
  'desktop': (
    'min': 1440px,
    'max': 1919px
  ),
  'tv': (
    'min': 1920px,
    'max': 100000px
  )
);

/// Media query mixin that translates a set of descriptors into rules that apply
/// bounding restrictions to screens. This mixin supports 5 predefined screen
/// types: 'mobile', tablet', 'notebook', 'desktop', 'tv' and 2 screen
/// orientations: 'portrait' and 'landscape'.
///
/// @param {List} $descriptors - List of strings formatted by either
///                              `{base}{relational_operator}{%s_or_screen_type}`
///                              or `{orientation}`. If no `{base}` is
///                              specified, width will be used. `{%s}` is also
///                              optional.
/// @param {List} $params [null] - List of values applied in the same order as
///                                the descriptors for string replacement
///                                whenever `%s` is used.
///
/// @example
///   @include screen('w<%s', 200px) { ... } // or
///   @include screen('<%s', 200px) { ... }  // or
///   @include screen('<', 200px) { ... }
///
///   // @media screen and (max-width: 199px) { ... }
///
/// @example
///   @include screen('h>=tablet') { ... }
///
///   // @media screen and (min-height: 640px) { ... }
///
/// @example
///   @include screen('w=tablet') { ... }
///
///   // @media screen and (min-width: 640px) and (max-width: 1023px) { ... }
///
/// @example
///   @include screen('w>=%s' 'w<%s' 'h>', 200px 400px 150px) { ... }
///
///   // @media screen and (min-width: 200px) and (max-width: 399px) and (min-height: 151px) { ... }
///
/// @content Encapsulated styles within the media query.
///
/// @group media
@mixin screen($descriptors, $params:null) {
  $_bases: (
    'w': 'width',
    'width': 'width',
    'h': 'height',
    'height': 'height'
  );

  $_queries: ();
  $_p: 1;

  @each $descriptor in $descriptors {
    $_base: null;
    $_rule: null;
    $_min: null;
    $_max: null;
    $_orientation: null;

    @if (str-index($descriptor, '<=') != null) {
      $_i: str-index($descriptor, '<=');
      $_base: str-slice($descriptor, 1, $_i - 1);
      $_rule: str-slice($descriptor, $_i + 2);
      $_base: if($_i == 1, map-get($_bases, 'width'), map-get($_bases, $_base));
      $_min: null;
      $_max: if(map-get($breakpoints, $_rule) == null, nth($params, $_p), map-get(map-get($breakpoints, $_rule), 'max'));
    }
    @else if (str-index($descriptor, '<') != null) {
      $_i: str-index($descriptor, '<');
      $_base: str-slice($descriptor, 1, $_i - 1);
      $_rule: str-slice($descriptor, $_i + 1);
      $_base: if($_i == 1, map-get($_bases, 'width'), map-get($_bases, $_base));
      $_min: null;
      $_max: if(map-get($breakpoints, $_rule) == null, nth($params, $_p) - 1, map-get(map-get($breakpoints, $_rule), 'min') - 1);
    }
    @else if (str-index($descriptor, '>=') != null) {
      $_i: str-index($descriptor, '>=');
      $_base: str-slice($descriptor, 1, $_i - 1);
      $_rule: str-slice($descriptor, $_i + 2);
      $_base: if($_i == 1, map-get($_bases, 'width'), map-get($_bases, $_base));
      $_min: if(map-get($breakpoints, $_rule) == null, nth($params, $_p), map-get(map-get($breakpoints, $_rule), 'min'));
      $_max: null;
    }
    @else if (str-index($descriptor, '>') != null) {
      $_i: str-index($descriptor, '>');
      $_base: str-slice($descriptor, 1, $_i - 1);
      $_rule: str-slice($descriptor, $_i + 1);
      $_base: if($_i == 1, map-get($_bases, 'width'), map-get($_bases, $_base));
      $_min: if(map-get($breakpoints, $_rule) == null, nth($params, $_p) + 1, map-get(map-get($breakpoints, $_rule), 'max') + 1);
      $_max: null;
    }
    @else if (str-index($descriptor, '=') != null) {
      $_i: str-index($descriptor, '=');
      $_base: str-slice($descriptor, 1, $_i - 1);
      $_rule: str-slice($descriptor, $_i + 1);
      $_base: if($_i == 1, map-get($_bases, 'width'), map-get($_bases, $_base));
      $_min: if(map-get($breakpoints, $_rule) == null, nth($params, $_p), map-get(map-get($breakpoints, $_rule), 'min'));
      $_max: if(map-get($breakpoints, $_rule) == null, nth($params, $_p), map-get(map-get($breakpoints, $_rule), 'max'));
    }
    @else if ($descriptor == 'portrait') {
      $_orientation: 'portrait';
    }
    @else if ($descriptor == 'landscape') {
      $_orientation: 'landscape';
    }

    @if (map-get($breakpoints, $_rule) == null) and ($_orientation == null) {
      @if (($_rule == '%s') or ($_rule == '')) {
        $_p: $_p + 1;
      }
      @else {
        @warn 'Bad format specified: #{$_rule}. Use %s or leave as blank instead';
      }
    }

    @if ($_min != null) { $_queries: append($_queries, '(min-#{$_base}: #{$_min})', 'comma'); }
    @if ($_max != null) { $_queries: append($_queries, '(max-#{$_base}: #{$_max})', 'comma'); }
    @if ($_orientation != null) { $_queries: append($_queries, '(orientation: #{$_orientation})'); }
  }

  $_media: '';

  @each $_query in $_queries {
    $_media: $_media + ' and ' + $_query;
  }

  @if ($_media != '') {
    $_media: 'screen' + $_media;
    @media #{$_media} { @content };
  }
  @else {
    @warn 'No valid media queries devised from these descriptors: #{$descriptors}';
  }
}

/// Sets the `background-size` and `background-position` of a target element,
/// one that is using an sprite map as its background, to the corresponding item
/// on the sprite map.
///
/// @param {String} $path - Path of sprite map.
/// @param {Number} $row-index - 0-based index of the row of the target item.
/// @param {Number} $col-index - 0-based index of the column of the target item.
/// @param {Number} $num-rows - Total number of rows in the image map.
/// @param {Number} $num-cols - Total number of columns in the image map.
///
/// @group media
@mixin image-map-item($path, $row-index, $col-index, $num-rows, $num-cols) {
  @if $path != null {
    background-image: url($path);
  }

  $x: 0;
  $y: 0;

  @if $num-cols > 1 { $x: ((1 / ($num-cols - 1)) * $col-index); }
  @if $num-rows > 1 { $y: ((1 / ($num-rows - 1)) * $row-index); }

  background-size: percentage($num-cols) percentage($num-rows);
  background-position: percentage($x) percentage($y);
}

/// Auto generates a list of class names of the target selector, where each
/// class represents a sprite as provided by the sprite map.
///
/// @param {String} $path - Path of sprite map.
/// @param {List}   $map [null] - List (1D or 2D) of class names. The position
///                               of each list item directly corresponds to the
///                               sprite position on the sprite map.
///
/// @todo This mixin is quite slow in performance due to the nested loop.
/// @group media
@mixin image-map($path:null, $map:null) {
  @if $path != null {
    background-image: url($path);
  }

  @if $map != null {
    $max-rows: length($map);

    @if $max-rows > 0 {
      @if type-of(nth($map, 1)) == list {
        $max-cols: length(nth($map, 1));

        @for $i from 1 through $max-rows {
          $row: nth($map, $i);

          @for $j from 1 through length(nth($map, $i)) {
            $col: nth($row, $j);
            &.#{$col} { @include image-map-item(null, $i - 1, $j - 1, $max-rows, $max-cols); }
          }
        }
      }
      @else {
        @for $i from 1 through $max-rows {
          $col: nth($map, $i);
          &.#{$col} { @include image-map-item(null, 0, $i - 1, 1, $max-rows); }
        }
      }
    }
  }
}

/// Applies styles for portrait screens.
///
/// @content Encapsulated styles within the media query.
///
/// @group media
@mixin portrait() {
  @include screen('portrait') {
    @content;
  }
}

/// Applies styles for landscape screens.
///
/// @content Encapsulated styles within the media query.
///
/// @group media
@mixin landscape() {
  @include screen('landscape') {
    @content;
  }
}

/// Applies styles for mobile screens.
///
/// @content Encapsulated styles within the media query.
///
/// @group media
@mixin mobile() {
  @include screen('w=mobile') {
    @content;
  }
}

/// Applies styles for tablet screens.
///
/// @content Encapsulated styles within the media query.
///
/// @group media
@mixin tablet() {
  @include screen('w=tablet') {
    @content;
  }
}

/// Applies styles for notebook screens.
///
/// @content Encapsulated styles within the media query.
///
/// @group media
@mixin notebook() {
  @include screen('w=notebook') {
    @content;
  }
}

/// Applies styles for desktop screens.
///
/// @content Encapsulated styles within the media query.
///
/// @group media
@mixin desktop() {
  @include screen('w=desktop') {
    @content;
  }
}

/// Applies styles for TV screens.
///
/// @content Encapsulated styles within the media query.
///
/// @group media
@mixin tv() {
  @include screen('w=tv') {
    @content;
  }
}

/// Applies styles for screens bigger than mobile devices.
///
/// @content Encapsulated styles within the media query.
///
/// @group media
@mixin gtmobile() {
  @include screen('w>mobile') {
    @content;
  }
}

/// Applies styles for screens bigger than tablet devices.
///
/// @content Encapsulated styles within the media query.
///
/// @group media
@mixin gttablet() {
  @include screen('w>tablet') {
    @content;
  }
}

/// Applies styles for screens bigger than notebook devices.
///
/// @content Encapsulated styles within the media query.
///
/// @group media
@mixin gtnotebook() {
  @include screen('w>notebook') {
    @content;
  }
}

/// Applies styles for screens bigger than desktop devices.
///
/// @content Encapsulated styles within the media query.
///
/// @group media
@mixin gtdesktop() {
  @include screen('w>desktop') {
    @content;
  }
}

/// Applies styles for screens bigger than TV devices.
///
/// @content Encapsulated styles within the media query.
///
/// @group media
@mixin gttv() {
  @include screen('w>tv') {
    @content;
  }
}

/// Applies styles for screens bigger than or equal to mobile devices.
///
/// @content Encapsulated styles within the media query.
///
/// @group media
@mixin gtemobile() {
  @include screen('w>=mobile') {
    @content;
  }
}

/// Applies styles for screens bigger than or equal to tablet devices.
///
/// @content Encapsulated styles within the media query.
///
/// @group media
@mixin gtetablet() {
  @include screen('w>=tablet') {
    @content;
  }
}

/// Applies styles for screens bigger than or equal to notebook devices.
///
/// @content Encapsulated styles within the media query.
///
/// @group media
@mixin gtenotebook() {
  @include screen('w>=notebook') {
    @content;
  }
}

/// Applies styles for screens bigger than or equal to desktop devices.
///
/// @content Encapsulated styles within the media query.
///
/// @group media
@mixin gtedesktop() {
  @include screen('w>=desktop') {
    @content;
  }
}

/// Applies styles for screens bigger than or equal to TV devices.
///
/// @content Encapsulated styles within the media query.
///
/// @group media
@mixin gtetv() {
  @include screen('w>=tv') {
    @content;
  }
}

/// Applies styles for screens smaller than or equal to mobile devices.
///
/// @content Encapsulated styles within the media query.
///
/// @group media
@mixin ltemobile() {
  @include screen('w<=mobile') {
    @content;
  }
}

/// Applies styles for screens smaller than or equal to tablet devices.
///
/// @content Encapsulated styles within the media query.
///
/// @group media
@mixin ltetablet() {
  @include screen('w<=tablet') {
    @content;
  }
}

/// Applies styles for screens smaller than or equal to notebook devices.
///
/// @content Encapsulated styles within the media query.
///
/// @group media
@mixin ltenotebook() {
  @include screen('w<=notebook') {
    @content;
  }
}

/// Applies styles for screens smaller than or equal to desktop devices.
///
/// @content Encapsulated styles within the media query.
///
/// @group media
@mixin ltedesktop() {
  @include screen('w<=desktop') {
    @content;
  }
}

/// Applies styles for screens smaller than or equal to TV devices.
///
/// @content Encapsulated styles within the media query.
///
/// @group media
@mixin ltetv() {
  @include screen('w<=tv') {
    @content;
  }
}

/// Applies styles for screens smaller than mobile devices.
///
/// @content Encapsulated styles within the media query.
///
/// @group media
@mixin ltmobile() {
  @include screen('w<mobile') {
    @content;
  }
}

/// Applies styles for screens smaller than tablet devices.
///
/// @content Encapsulated styles within the media query.
///
/// @group media
@mixin lttablet() {
  @include screen('w<tablet') {
    @content;
  }
}

/// Applies styles for screens smaller than notebook devices.
///
/// @content Encapsulated styles within the media query.
///
/// @group media
@mixin ltnotebook() {
  @include screen('w<notebook') {
    @content;
  }
}

/// Applies styles for screens smaller than desktop devices.
///
/// @content Encapsulated styles within the media query.
///
/// @group media
@mixin ltdesktop() {
  @include screen('w<desktop') {
    @content;
  }
}

/// Applies styles for screens smaller than TV devices.
///
/// @content Encapsulated styles within the media query.
///
/// @group media
@mixin lttv() {
  @include screen('w<tv') {
    @content;
  }
}
