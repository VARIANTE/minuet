// Minuet
// (c) VARIANTE (http://variante.io)
//
// This software is released under the MIT License:
// http://www.opensource.org/licenses/mit-license.php

/// Converts a string to a number.
///
/// @param {string|number} $value - Value to be converted.
///
/// @return {number}
///
/// @group utils
@function to-number($value) {
  @if (type-of($value) == 'number') {
    @return $value;
  } @else if (type-of($value) != 'string') {
    @warn 'Value must be a number or a string';
    @return 0;
  }

  $_output: 0;
  $_digits: 0;
  $_negative: str-slice($value, 1, 1) == '-';
  $_lookup: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

  @for $i from if($_negative, 2, 1) through str-length($value) {
    $_c: str-slice($value, $i, $i);

    @if not (index(map-keys($_lookup), $_c) or $_c == '.') {
      @return to-unit(if($_negative, -$_output, $_output), str-slice($value, $i))
    }

    @if ($_c == '.') {
      $_digits: 1;
    } @else if ($_digits == 0) {
      $_output: $_output * 10 + map-get($_lookup, $_c);
    } @else {
      $_digits: $_digits * 10;
      $_output: $_output + map-get($_lookup, $_c) / $_digits;
    }
  }

  @return if($_negative, -$_output, $_output);;
}

/// Converts a number to a unit.
///
/// @param {number} $value - Value to add unit to
/// @param {string} $unit - String representation of the unit
///
/// @return {Unit}
@function to-unit($value, $unit) {
  $_units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);

  @if (not index(map-keys($_units), $unit)) {
    @warn 'Invalid unit: #{$unit}';
    @return 0
  }

  @return $value * map-get($_units, $unit);
}
