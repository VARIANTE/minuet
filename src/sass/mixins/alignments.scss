// Minuet
// (c) VARIANTE (http://variante.io)
//
// This software is released under the MIT License:
// http://www.opensource.org/licenses/mit-license.php

/// Sets the margin of an element. Similar to the original 'margin' CSS rule,
/// except for the addition of 2 values: null and ''. If null is specified for
/// a specific side of the margin, that side will not be set. If '' is specified
/// for a specific side of the margin, it will take the value of the previous
/// side.
///
/// @param {number|List} $top    [null]  - Value for the top margin or a list of
///                                        values for each side of the margin
///                                        ordered by top, right, bottom and
///                                        left. Other than the first value, all
///                                        values are optional. If values are
///                                        left out, the behavior will be
///                                        similar to the original 'margin' CSS
///                                        rule (i.e. bottom matches top, right
///                                        matches left, etc).
/// @param {number}      $right  [unset] - Value for the right margin, if unset
///                                        this will be automatically inferred.
/// @param {number}      $bottom [unset] - Value for the bottom margin, if unset
///                                        this will be automatically inferred.
/// @param {number}      $left   [unset] - Value for the left margin, if unset
///                                        this will be automatically inferred.
///
/// @example
///   @include margin(0px);
///
///   // margin-top: 0px;
///   // margin-right: 0px;
///   // margin-bottom: 0px;
///   // margin-left: 0px;
///
/// @example
///   @include margin(0px 5px);
///
///   // margin-top: 0px;
///   // margin-right: 5px;
///   // margin-bottom: 0px;
///   // margin-left: 5px;
///
/// @example
///   @include margin(0px 5px '' null);
///
///   // margin-top: 0px;
///   // margin-right: 5px;
///   // margin-bottom: 5px;
///
/// @group alignments
@mixin margin($top:null, $right:unset, $bottom:unset, $left:unset) {
  $_top: if(length($top) > 1, nth($top, 1), $top);
  $_right: if(length($top) > 1, nth($top, 2), $_top);
  $_right: if($right == unset, $_right, $right);
  $_bottom: if(length($top) > 2, nth($top, 3), $_top);
  $_bottom: if($bottom == unset, $_bottom, $bottom);
  $_left: if(length($top) > 3, nth($top, 4), $_right);
  $_left: if($left == unset, $_left, $left);

  @if ($_right == '') { $_right: $_top; }
  @if ($_bottom == '') { $_bottom: $_right; }
  @if ($_left == '') { $_left: $_bottom; }

  @if ($_top != null) and ($_top != '-') { margin-top: $_top; }
  @if ($_right != null) and ($_right != '-') { margin-right: $_right; }
  @if ($_bottom != null) and ($_bottom != '-') { margin-bottom: $_bottom; }
  @if ($_left != null) and ($_left != '-') { margin-left: $_left; }
}

/// Sets the horizontal margins (i.e. left and right respectively). Values are
/// optional except for the first value. If null is specified, that side of
/// the margin will not be set. If '' is specified, the previous value will be
/// used instead (likewise if it is left out).
///
/// @param {number|List} $left  [null]  - Value for the left margin or a list of
///                                       up to 2 values for left and right
///                                       margins respectively.
/// @param {number}      $right [unset] - Value for the right margin. If unset,
///                                       this value will be automatically
///                                       inferred.
///
/// @group alignments
@mixin margin-h($left:null, $right:unset) {
  $_left: if(length($left) > 1, nth($left, 1), $left);
  $_right: if(length($left) > 1, nth($left, 2), $_left);
  $_right: if($right == unset, $_right, $right);

  @if ($_right == '') { $_right: $_left; }

  @if ($_left != null) and ($_left != '-') { margin-left: $_left; }
  @if ($_right != null) and ($_right != '-') { margin-right: $_right; }
}

/// Sets the vertical margins (i.e. top and bottom respectively). Values are
/// optional except for the first value. If null is specified, that side of
/// the margin will not be set. If '' is specified, the previous value will be
/// used instead (likewise if it is left out).
///
/// @param {number|List} $top    [null]  - Value for the top margin or a list of
///                                        up to 2 values for top and bottom
///                                        margins respectively.
/// @param {number}      $bottom [unset] - Value for the bottom margin. If unset,
///                                        this value will be automatically
///                                        inferred.
///
/// @group alignments
@mixin margin-v($top:null, $bottom:unset) {
  $_top: if(length($top) > 1, nth($top, 1), $top);
  $_bottom: if(length($top) > 1, nth($top, 2), $_top);
  $_bottom: if($bottom == unset, $_bottom, $bottom);

  @if ($_bottom == '') { $_right: $_top; }

  @if ($_top != null) and ($_top != '-') { margin-top: $_top; }
  @if ($_bottom != null) and ($_bottom != '-') { margin-bottom: $_bottom; }
}

/// Sets the padding of an element. Similar to the original 'padding' CSS rule,
/// except for the addition of 2 values: null and ''. If null is specified for
/// a specific side of the padding, that side will not be set. If '' is
/// specified for a specific side of the padding, it will take the value of the
/// previous side.
///
/// @param {number|List} $top    [null]  - Value for the top padding or a list of
///                                        values for each side of the padding
///                                        ordered by top, right, bottom and
///                                        left. Other than the first value, all
///                                        values are optional. If values are
///                                        left out, the behavior will be
///                                        similar to the original 'padding' CSS
///                                        rule (i.e. bottom matches top, right
///                                        matches left, etc).
/// @param {number}      $right  [unset] - Value for the right padding, if unset
///                                        this will be automatically inferred.
/// @param {number}      $bottom [unset] - Value for the bottom padding, if unset
///                                        this will be automatically inferred.
/// @param {number}      $left   [unset] - Value for the left padding, if unset
///                                        this will be automatically inferred.
///
/// @example
///   @include padding(0px);
///
///   // padding-top: 0px;
///   // padding-right: 0px;
///   // padding-bottom: 0px;
///   // padding-left: 0px;
///
/// @example
///   @include padding(0px 5px);
///
///   // padding-top: 0px;
///   // padding-right: 5px;
///   // padding-bottom: 0px;
///   // padding-left: 5px;
///
/// @example
///   @include padding(0px 5px '' null);
///
///   // padding-top: 0px;
///   // padding-right: 5px;
///   // padding-bottom: 5px;
///
/// @group alignments
@mixin padding($top:null, $right:unset, $bottom:unset, $left:unset) {
  $_top: if(length($top) > 1, nth($top, 1), $top);
  $_right: if(length($top) > 1, nth($top, 2), $_top);
  $_right: if($right == unset, $_right, $right);
  $_bottom: if(length($top) > 2, nth($top, 3), $_top);
  $_bottom: if($bottom == unset, $_bottom, $bottom);
  $_left: if(length($top) > 3, nth($top, 4), $_right);
  $_left: if($left == unset, $_left, $left);

  @if ($_right == '') { $_right: $_top; }
  @if ($_bottom == '') { $_bottom: $_right; }
  @if ($_left == '') { $_left: $_bottom; }

  @if ($_top != null) and ($_top != '-') { padding-top: $_top; }
  @if ($_right != null) and ($_right != '-') { padding-right: $_right; }
  @if ($_bottom != null) and ($_bottom != '-') { padding-bottom: $_bottom; }
  @if ($_left != null) and ($_left != '-') { padding-left: $_left; }
}

/// Sets the horizontal paddings (i.e. left and right respectively). Values are
/// optional except for the first value. If null is specified, that side of
/// the padding will not be set. If '' is specified, the previous value will be
/// used instead (likewise if it is left out).
///
/// @param {number|List} $left  [null]  - Value for the left padding or a list
///                                       of up to 2 values for left and right
///                                       margins respectively.
/// @param {number}      $right [unset] - Value for the right padding. If unset,
///                                       this value will be automatically
///                                       inferred.
///
/// @group alignments
@mixin padding-h($left:null, $right:unset) {
  $_left: if(length($left) > 1, nth($left, 1), $left);
  $_right: if(length($left) > 1, nth($left, 2), $_left);
  $_right: if($right == unset, $_right, $right);

  @if ($_right == '') { $_right: $_left; }

  @if ($_left != null) and ($_left != '-') { padding-left: $_left; }
  @if ($_right != null) and ($_right != '-') { padding-right: $_right; }
}

/// Sets the vertical paddings (i.e. top and bottom respectively). Values are
/// optional except for the first value. If null is specified, that side of
/// the padding will not be set. If '' is specified, the previous value will be
/// used instead (likewise if it is left out).
///
/// @param {number|List} $top    [null]  - Value for the top padding or a list
///                                        of up to 2 values for top and bottom
///                                        margins respectively.
/// @param {number}      $bottom [unset] - Value for the bottom padding. If unset,
///                                        this value will be automatically
///                                        inferred.
///
/// @group alignments
@mixin padding-v($top:null, $bottom:unset) {
  $_top: if(length($top) > 1, nth($top, 1), $top);
  $_bottom: if(length($top) > 1, nth($top, 2), $_top);
  $_bottom: if($bottom == unset, $_bottom, $bottom);

  @if ($_bottom == '') { $_right: $_top; }

  @if ($_top != null) and ($_top != '-') { padding-top: $_top; }
  @if ($_bottom != null) and ($_bottom != '-') { padding-bottom: $_bottom; }
}

/// Sets the edge of an element (i.e. top, right, bottom and left). This mixin
/// makes setting edges similar to margins and paddings where you can apply
/// a list of up to 4 values to set all edges. If null is specified for a
/// specific edge, that edge will not be set. If '' is specified for a specific
/// edge, it will take the value of the previous edge.
///
/// @param {number|List} $top    [null]  - Value for the top edge or a list of
///                                        values for each side of the edge
///                                        ordered by top, right, bottom and
///                                        left. Other than the first value, all
///                                        values are optional. If values are
///                                        left out, the behavior will be
///                                        similar to the original 'margin' CSS
///                                        rule (i.e. bottom matches top, right
///                                        matches left, etc).
/// @param {number}      $right  [unset] - Value for the right edge, if unset
///                                        this will be automatically inferred.
/// @param {number}      $bottom [unset] - Value for the bottom edge, if unset
///                                        this will be automatically inferred.
/// @param {number}      $left   [unset] - Value for the left edge, if unset
///                                        this will be automatically inferred.
///
/// @example
///   @include edge(0px);
///
///   // top: 0px;
///   // right: 0px;
///   // bottom: 0px;
///   // left: 0px;
///
/// @example
///   @include edge(0px 5px);
///
///   // top: 0px;
///   // right: 5px;
///   // bottom: 0px;
///   // left: 5px;
///
/// @example
///   @include edge(0px 5px '' null);
///
///   // top: 0px;
///   // right: 5px;
///   // bottom: 5px;
///
/// @group alignments
@mixin edge($top:null, $right:unset, $bottom:unset, $left:unset) {
  $_top: if(length($top) > 1, nth($top, 1), $top);
  $_right: if(length($top) > 1, nth($top, 2), $_top);
  $_right: if($right == unset, $_right, $right);
  $_bottom: if(length($top) > 2, nth($top, 3), $_top);
  $_bottom: if($bottom == unset, $_bottom, $bottom);
  $_left: if(length($top) > 3, nth($top, 4), $_right);
  $_left: if($left == unset, $_left, $left);

  @if ($_right == '') { $_right: $_top; }
  @if ($_bottom == '') { $_bottom: $_right; }
  @if ($_left == '') { $_left: $_bottom; }

  @if ($_top != null) and ($_top != '-') { top: $_top; }
  @if ($_right != null) and ($_right != '-') { right: $_right; }
  @if ($_bottom != null) and ($_bottom != '-') { bottom: $_bottom; }
  @if ($_left != null) and ($_left != '-') { left: $_left; }
}

/// Sets the horizontal edges (i.e. left and right respectively). Values are
/// optional except for the first value. If null is specified, that side of
/// the edge will not be set. If '' is specified, the previous value will be
/// used instead (likewise if it is left out).
///
/// @param {number|List} $left  [null]  - Value for the left edge or a list of
///                                       up to 2 values for left and right
///                                       margins respectively.
/// @param {number}      $right [unset] - Value for the right edge. If unset,
///                                       this value will be automatically
///                                       inferred.
///
/// @group alignments
@mixin edge-h($left:null, $right:unset) {
  $_left: if(length($left) > 1, nth($left, 1), $left);
  $_right: if(length($left) > 1, nth($left, 2), $_left);
  $_right: if($right == unset, $_right, $right);

  @if ($_right == '') { $_right: $_left; }

  @if ($_left != null) and ($_left != '-') { left: $_left; }
  @if ($_right != null) and ($_right != '-') { right: $_right; }
}

/// Sets the vertical edges (i.e. top and bottom respectively). Values are
/// optional except for the first value. If null is specified, that side of
/// the edge will not be set. If '' is specified, the previous value will be
/// used instead (likewise if it is left out).
///
/// @param {number|List} $top    [null]  - Value for the top edge or a list of
///                                        up to 2 values for top and bottom
///                                        margins respectively.
/// @param {number}      $bottom [unset] - Value for the bottom edge. If unset,
///                                        this value will be automatically
///                                        inferred.
///
/// @group alignments
@mixin edge-v($top:null, $bottom:unset) {
  $_top: if(length($top) > 1, nth($top, 1), $top);
  $_bottom: if(length($top) > 1, nth($top, 2), $_top);
  $_bottom: if($bottom == unset, $_bottom, $bottom);

  @if ($_bottom == '') { $_right: $_top; }

  @if ($_top != null) and ($_top != '-') { top: $_top; }
  @if ($_bottom != null) and ($_bottom != '-') { bottom: $_bottom; }
}

/// Clearfix hack for floated elements.
///
/// @group alignments
@mixin clearfix() {
  *zoom: 1;

  &:before {
    content: '';
    display: table;
  }

  &:after {
    content: '';
    display: table;
    clear: both;
  }
}

/// Aligns an element horizontally and vertically.
///
/// @param {List}   $alignH ['left']     - List of up to 3 values that describes
///                                        the horizontal alignment. First value
///                                        represents the direction (i.e. left,
///                                        center, right) and the second and
///                                        third value are the left and right
///                                        edges respectively.
/// @param {List}   $alignV ['top']      - List of up to 3 values that describes
///                                        the vertical alignment. First value
///                                        represents the direction (i.e. top,
///                                        center, bottom) and the second and
///                                        third value are the top and bottom
///                                        edges respectively.
/// @param {string} $type ['absolute']   - Specifies the position type (i.e.
///                                        absolute or fixed).
///
/// @group alignments
@mixin align($alignH:'left', $alignV:'top', $type:'absolute') {
  @if ($type == 'absolute') or ($type == 'abs') {
    @include abs-align($alignH, $alignV);
  }
  @else if ($type == 'fixed') or ($type == 'fix') {
    @include fixed-align($alignH, $alignV);
  }
  @else if ($type == 'inline') {
    @include inline-align($alignH, $alignV);
  }
}

/// Aligns containing selector to specified x/y directions in absolute position.
///
/// @param {List} $alignH ['left'] - Horizontal alignment (left|center|right,
///                                  left|right offset, right offset).
/// @param {List} $alignV ['top']  - Vertical alignment (top|center|middle|bottom,
///                                  top|bottom offset, bottom offset).
///
/// @group alignments
@mixin abs-align($alignH:'left', $alignV:'top') {
  @include edge(auto);
  @include margin(0);
  position: absolute;

  @if $alignH != null and length($alignH) > 0 {
    $align: nth($alignH, 1);
    $left: if(length($alignH) > 1, nth($alignH, 2), null);
    $right: if(length($alignH) > 2, nth($alignH, 3), null);

    @if $align == 'left' {
      left: 0px;
    }
    @else if $align == 'center' or $align == 'middle' {
      @include margin-h(auto);
      left: 0px;
      right: 0px;
    }
    @else if $align == 'right' {
      right: 0px;
    }

    @include edge-h($left $right);
  }

  @if $alignV != null and length($alignV) > 0 {
    $align: nth($alignV, 1);
    $top: if(length($alignV) > 1, nth($alignV, 2), null);
    $bottom: if(length($alignV) > 2, nth($alignV, 3), null);

    @if $align == 'top' {
      top: 0px;
    }
    @else if $align == 'center' or $align == 'middle' {
      @include margin-v(auto);
      top: 0px;
      bottom: 0px;
    }
    @else if $align == 'bottom' {
      bottom: 0px;
    }

    @include edge-v($top $bottom);
  }
}

// Aligns containing selector to specified x/y directions in fixed position.
//
// @param {List} $alignH ['left'] - Horizontal alignment (left|center|right,
//                                  left|right offset, right offset).
// @param {List} $alignV ['top']  - Vertical alignment (top|center|middle|bottom,
//                                  top|bottom offset, bottom offset).
//
// @group alignments
@mixin fixed-align($alignH:'left', $alignV:'top') {
  @include abs-align($alignH, $alignV);
  position: fixed;
}

/// Aligns containing inline-block to specified x/y directions in relative
/// position.
///
/// @param {string} $alignH ['left'] - Horizontal alignment (i.e. left, center,
///                                    right).
/// @param {string} $alignV ['top']  - Vertical alignment (i.e. top, middle,
///                                    bottom).
///
/// @group alignments
@mixin inline-align($alignH:'left', $alignV:'top') {
  position: relative;

  // Horizontal alignment cannot be altered at the child level. Tweak the
  // parent's text-align rule instead.

  @if      $alignV == 'top'                           { vertical-align: top;    }
  @else if $alignV == 'center' or $alignV == 'middle' { vertical-align: middle; }
  @else if $alignV == 'bottom'                        { vertical-align: bottom; }
}

/// Sets the size of the target selector.
///
/// @param {number|List} $width          - Specifies the width and height of the
///                                        selector. If only 1 value is provided,
///                                        both width and height will use that
///                                        value. If 2 values are provided, they
///                                        will be used for width and height
///                                        respectively.
/// @param {number}      $height [unset] - Specifies the height (overrides
///                                        the previous parameter).
/// @param {boolean}     $oval [false]   - Specifies whether the selector is
///                                        oval shaped (hence rounded corners
///                                        corresponding to the shortest side).
///
/// @group alignments
@mixin size($width, $height:unset, $oval:false) {
  $_width: if(length($width) > 1, nth($width, 1), $width);
  $_height: if(length($width) > 1, nth($width, 2), $_width);
  $_height: if($height == unset or $height == true or $height == false, $_height, $height);
  $_oval: if($height == true or $height == false, $height, $oval);

  @if ($_height == '') { $_height: $_width; }

  @if ($_width != null) and ($_width != '-') and ($_width != 'x') and ($_width != 'n') {
    width: $_width;
  }

  @if ($_height != null) and ($_height != '-') and ($_height != 'x') and ($_height != 'n') {
    height: $_height;
  }

  @if ($_oval == true) {
    @include overflow(hidden);
    border-radius: (min($_width, $_height) / 2);
  }
}

/// Sets the max size of the target selector.
///
/// @param {number|List} $width          - Specifies the max width and height of
///                                        the selector. If only 1 value is
///                                        provided, both max-width and
///                                        max-height will use that value. If 2
///                                        values are provided, they will be
///                                        used for max-width and max-height
///                                        respectively.
/// @param {number}      $height [unset] - Specifies the max height (overrides
///                                        the previous parameter).
///
/// @group alignments
@mixin max-size($width, $height:unset) {
  $_width: if(length($width) > 1, nth($width, 1), $width);
  $_height: if(length($width) > 1, nth($width, 2), $_width);
  $_height: if($height == unset, $_height, $height);

  @if ($_height == '') { $_height: $_width; }

  @if ($_width != null) and ($_width != '-') and ($_width != 'x') and ($_width != 'n') {
    max-width: $_width;
  }

  @if ($_height != null) and ($_height != '-') and ($_height != 'x') and ($_height != 'n') {
    max-height: $_height;
  }
}

/// Sets the min size of the target selector.
///
/// @param {number|List} $width          - Specifies the min width and height of
///                                        the selector. If only 1 value is
///                                        provided, both min-width and
///                                        min-height will use that value. If 2
///                                        values are provided, they will be
///                                        used for min-width and min-height
///                                        respectively.
/// @param {number}      $height [unset] - Specifies the min height (overrides
///                                        the previous parameter).
///
/// @group alignments
@mixin min-size($width, $height:unset) {
  $_width: if(length($width) > 1, nth($width, 1), $width);
  $_height: if(length($width) > 1, nth($width, 2), $_width);
  $_height: if($height == unset, $_height, $height);

  @if ($_height == '') { $_height: $_width; }

  @if ($_width != null) and ($_width != '-') and ($_width != 'x') and ($_width != 'n') {
    min-width: $_width;
  }

  @if ($_height != null) and ($_height != '-') and ($_height != 'x') and ($_height != 'n') {
    min-height: $_height;
  }
}

/// Sets the overflow of the target selector.
///
/// @param {number|List} $overflowX - Specifies the overflow of the selector. If
///                                   only 1 value is provided, both overflow-x
///                                   and overflow-y will use that value. If 2
///                                   values are provided, they will be used for
///                                   overflow-x and overflow-y respectively.
/// @param {number}      $overflowY [unset] - Specifies the overflow-y value
///                                           (overrides the previous parameter)
///                                           if specified.
///
/// @group alignments
@mixin overflow($overflowX, $overflowY:unset) {
  $_overflowX: if(length($overflowX) > 1, nth($overflowX, 1), $overflowX);
  $_overflowY: if(length($overflowX) > 1, nth($overflowX, 2), $_overflowX);
  $_overflowY: if($overflowY == unset, $_overflowY, $overflowY);

  @if ($_overflowY == '') {
    $_overflowY: $_overflowX;
  }

  @if ($_overflowX != null) and ($_overflowX != '-') and ($_overflowX != 'x') and ($_overflowX != 'n') {
    overflow-x: $_overflowX;
  }

  @if ($_overflowY != null) and ($_overflowY != '-') and ($_overflowY != 'x') and ($_overflowY != 'n') {
    overflow-y: $_overflowY;
  }
}

/// Sets the space in between adjacent elements excluding the first and last
/// element.
///
/// @param {number} $value           - Specifies the value of the gap.
/// @param {string} $direction ['>'] - Specifies the direction. '>', 'horizontal'
///                                    and 'row' means horizontal. 'v', 'vertical'
///                                    and 'column' means vertical.
///
/// @group alignments
@mixin space-between($value, $direction:'>') {
  $_direction: quote($direction);

  @if ($_direction == '>') or ($_direction == 'horizontal') or ($_direction == 'row') {
    &:not(:last-child) {
      margin-right: $value;
    }
  }
  @else if ($_direction == 'v') or ($_direction == 'vertical') or ($_direction == 'column') {
    &:not(:last-child) {
      margin-bottom: $value;
    }
  }
}
